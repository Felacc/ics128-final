// Default coordinates set to interurban campus
let userLat = 48.49103113795146;
let userLong = -123.41514114992222;

async function getUserCoords() {
    return new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
            reject({ userLat, userLong });
        }

        navigator.geolocation.getCurrentPosition(
            // success function
            (position) => {
                userLat = position.coords.latitude;
                userLong = position.coords.longitude;
                resolve({ userLat, userLong })
            },
            // error function - defaults to interurban
            () => {
                reject({ userLat, userLong });
            }
        );
    });
}

async function getPorts() {
    const response = await fetch("public/ports.json");
    if (!response.ok) {
        throw new Error(`Error: ${response.statusText}`);
    }
    const ports = await response.json();
    return ports;
}

async function getVessels() {
    const response = await fetch("public/vessels.json");
    if (!response.ok) {
        throw new Error(`Error: ${response.statusText}`);
    }
    const vessels = await response.json();
    return vessels;
}

async function getWeatherData(latitude, longitude) {
    // not my api key
    // note to self: if you do start using your own use a proxy server or something (before you commit)
    const API_KEY = "408910547897fd9d7029410128827a6d";
    const UNITS = "metric";

    const URL = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=${UNITS}&appid=${API_KEY}`;

    try {
        const response = await fetch(URL);

        if (!response.ok) {
            throw new Error(`Error: ${response.statusText}`);
        }

        const data = await response.json();

        return data;
    } catch (e) {
        console.error(`An error occurred while fetching weather data: ${e}`);
    }
}

// I used leaflet's PosAnimation: https://leafletjs.com/reference.html#posanimation
async function runBoatAnimation(latlngs, map) {
    const boatIcon = L.divIcon({
        html: `<i class="fa-solid fa-ship text-danger" style="font-size: 1.5rem"></i>`,
        className: ""
    });
    const boat = L.marker([latlngs[0].lat, latlngs[0].lng], { icon: boatIcon }).addTo(map);
    const fx = new L.PosAnimation();

    // used to ensure each PosAnimation runs one at a time
    const moveBoatToPos = (latlng) => {
        return new Promise((resolve, reject) => {
            try {
                const pos = map.latLngToLayerPoint(latlng);
                fx.run(boat._icon, pos, 2); // run the animation
                fx.once('end', resolve); // resolve the promise
            } catch (e) {
                reject(e); // reject with error
            }
        });
    };

    for (let i = 1; i < latlngs.length; i++) {
        await moveBoatToPos(latlngs[i]);
    }
}

async function loadMap() {
    const { userLat, userLong } = await getUserCoords();
    const ports = await getPorts();
    const vessels = await getVessels();

    let tripStarted = false; // used to keep track of if a user has started a trip for controlling state of marker popups
    let latlngsForTrip = []; // used to keep track of marker coords (used to draw leaflet polyline)
    let tripPolyline = null;
    let tripDistance = 0;
    let stops = [] // used to keep track of markers that are generated by clicking on ocean

    var map = L.map('map', {
        center: [userLat, userLong],
        zoom: 4,
    });

    // Add the tile layer
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    // Add a marker at Interurban or user location on load
    const userLocIcon = L.divIcon({
        html: `<i class="fa-solid fa-location-dot text-success" style="font-size: 1.5rem"></i>`,
        className: "", // remove leaflet stylings
        iconSize: [24, 24], // 24px x 24px --- 24px ~= 1.5rem
        iconAnchor: [12, 24] // sets the icon position to the middle top (since the marker is a long shape)
    });
    L.marker([userLat, userLong], { icon: userLocIcon }).addTo(map).bindPopup("You are here!");

    // Add markers at all ports
    // Using Font Awesome icons w/ Bootstrap styling for markers
    const portIcon = L.divIcon({
        html: '<i class="fa-solid fa-anchor text-primary" style="font-size: 1.5rem;"></i>',
        className: "",
        iconSize: [24, 24],
        iconAnchor: [12, 24] // sets the icon position to the middle top (since the anchor is also a long shape)
    });
    for (const port of ports) {
        L.marker([port.coordinates[0], port.coordinates[1]], { icon: portIcon }).addTo(map).bindPopup(() => {
            const disabledStartBtn = tripStarted ? "disabled" : "";
            const disabledAddStopBtn = tripStarted ? "" : "disabled";
            const disabledEndBtn = tripStarted ? "" : "disabled";

            return `
                <h5>${port.name}</h5>
                <div id="weather">Loading weather...</div>
                <button type="button" id="startTripBtn" class="btn btn-primary" ${disabledStartBtn}>Start Trip</button>
                <button type="button" id="addStopBtn" class="btn btn-primary" ${disabledAddStopBtn}>Add Stop</button>
                <button type="button" id="endTripBtn" class="btn btn-primary" ${disabledEndBtn}>End Trip</button>
            `;
        });
    }

    // Add event listeners to popup start and end trip buttons
    // have to add an event listener to detect when popups open first, because popups are added to the dom only when they are opened (i think)
    map.on("popupopen", (e) => {
        const popup = e.popup.getElement();
        const markerLatlng = e.popup._latlng;
        const startTripBtn = $(popup).find("#startTripBtn");
        const addStopBtn = $(popup).find("#addStopBtn");
        const endTripBtn = $(popup).find("#endTripBtn");

        // Async IIFE from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function#async_iife
        // Add weather data to popup
        (async () => {
            const weatherData = await getWeatherData(markerLatlng.lat, markerLatlng.lng);
            console.log(weatherData);
            $(popup).find("#weather").html(`
                <div class="d-flex">
                    <div id="weatherLeft"><img src="https://openweathermap.org/img/wn/${weatherData.weather[0].icon}.png"></div>
                    <div id"weatherRight" class="d-flex flex-column justify-content-center align-items-center">
                        ${weatherData.main.temp} &deg;C 
                        <br>
                        ${weatherData.weather[0].main}
                    </div>
                </div>
                `);
        })();

        startTripBtn.on("click", () => {
            latlngsForTrip = []; // empty array from previous trip
            if (tripPolyline) { tripPolyline.setLatLngs([]); } // reset polyline
            tripDistance = 0; // reset distance
            for (stop of stops) { // remove stop markers
                stop.remove();
            }
            $("#distance").remove(); // remove distance displayed from previous trip (if it's there)
            $("#capableVessels").remove(); // remove list of capable vessels
            tripStarted = true;
            startTripBtn.prop("disabled", true);
            addStopBtn.prop("disabled", false);
            endTripBtn.prop("disabled", false);
            latlngsForTrip.push(markerLatlng);
            tripPolyline = L.polyline(latlngsForTrip, { color: "red" }).addTo(map);
        });

        addStopBtn.on("click", () => {
            latlngsForTrip.push(markerLatlng);
            tripPolyline.setLatLngs(latlngsForTrip);
            tripDistance += map.distance(latlngsForTrip[latlngsForTrip.length - 2], latlngsForTrip[latlngsForTrip.length - 1]);
        });

        endTripBtn.on("click", () => {
            tripStarted = false;
            startTripBtn.prop("disabled", false);
            addStopBtn.prop("disabled", true);
            endTripBtn.prop("disabled", true);
            latlngsForTrip.push(markerLatlng);
            tripPolyline.setLatLngs(latlngsForTrip);
            runBoatAnimation(latlngsForTrip, map);
            tripDistance += map.distance(latlngsForTrip[latlngsForTrip.length - 2], latlngsForTrip[latlngsForTrip.length - 1]);
            $("body").append(`<h1 id="distance">${tripDistance * 0.000621371} miles</h1>`);

            $("body").append(`<div id="capableVessels"><h3>Capable Vessels:</h3></div>`);
            let capableVessels = [];
            for (vessel of vessels) {
                const maxDistanceInMiles = vessel.max_travel_distance_nautical_miles;
                tripDistanceInMiles = tripDistance * 0.000621371;
                if (maxDistanceInMiles == "Unlimited" || maxDistanceInMiles >= tripDistanceInMiles) {
                    capableVessels.push(vessel);
                    $("#capableVessels").append(`<p>${vessel.name}</p>`);
                }

            }
        });
    });


    // Load and duplicate water polygons //
    // This stuff is where Joe differentiates the land and sea. DON'T Change this Stuff //
    // Unless you dont want it to work.
    let waterPolygons;
    // Duplicating the land and sea over 3 sets of world maps
    function duplicateWaterPolygons(original) {
        const offsets = [-360, 0, 360];
        const allFeatures = [];

        for (const offset of offsets) {
            const wrapped = JSON.parse(JSON.stringify(original));
            for (const feature of wrapped.features) {
                const geom = feature.geometry;
                if (geom.type === "Polygon") {
                    geom.coordinates = geom.coordinates.map(ring =>
                        ring.map(([lng, lat]) => [lng + offset, lat])
                    );
                } else if (geom.type === "MultiPolygon") {
                    geom.coordinates = geom.coordinates.map(polygon =>
                        polygon.map(ring =>
                            ring.map(([lng, lat]) => [lng + offset, lat])
                        )
                    );
                }
            }
            allFeatures.push(...wrapped.features);
        }

        return {
            type: "FeatureCollection",
            features: allFeatures
        };
    }
    // Fetching JSON data to make the boundaries
    fetch('public/ocean.geojson')
        .then(res => res.json())
        .then(data => {
            waterPolygons = duplicateWaterPolygons(data);
        });

    /* Click event to detect land or water. You will have to add things and change things in here
    But you won't likely want to delete  this! */
    map.on('click', function (e) {
        if (!waterPolygons) return;
        const point = turf.point([e.latlng.lng, e.latlng.lat]);
        let isInWater = null;
        for (let feature of waterPolygons.features) {
            if (turf.booleanPointInPolygon(point, feature)) {
                isInWater = true;
                break;
            }
        }
        // if its water, do something!!! Definitely delete those alerts.
        if (isInWater) {
            if (tripStarted) {
                latlngsForTrip.push(L.latLng(e.latlng.lat, e.latlng.lng));
                stops.push(L.marker([e.latlng.lat, e.latlng.lng]).addTo(map));
                tripPolyline.setLatLngs(latlngsForTrip);
                tripDistance += map.distance(latlngsForTrip[latlngsForTrip.length - 2], latlngsForTrip[latlngsForTrip.length - 1]);



            }
        } else {
            // a random thought:
            // update the map visuals so that there is only one boat icon on whatever port the trip is started at
            // the boat travels along the polyline of the trip
            // if that polyline happens to be across land... like from van to boston
            // turn the boat into a car before animating it...? this might be hard
        }
    });

    return vessels; // if this works i just might keep it, it's so stupid
}

// loads using bootstrap grid by default
function loadBoatCatalog(vessels) {
    const catalogContent = $("#catalogContent");

    const displayVesselsAsGrid = () => {
        catalogContent.html("");
        const row = `<div id="mainRow" class="row row-cols-2 row-cols-lg-5 g-2 g-lg-3"></div>`;
        catalogContent.append(row);
        for (vessel of vessels) {
            // replace boatimg with custom imgs in json eventually
            const boatCard = `
            <div class="col">
                <div class="card">
                    <img src="images/boat.jpeg" class="card-img-top" alt="...">
                    <div class="card-body">
                        <h5 class="card-title">${vessel.name}</h5>
                        <p class="card-text"><b>Type: </b>${vessel.type}</p>
                        <p class="card-text"><b>Length: </b>${vessel.length_meters} meters</p>
                        <p class="card-text"><b>Speed: </b>${vessel.speed_knots} knots</p>
                        <p class="card-text"><b>Crew needed: </b>${vessel.crew_required} members</p>
                        <p class="card-text"><b>Crew per member: </b>$${vessel.crew_cost_per_member}</p>
                        <p class="card-text"><b>Base rate: </b>$${vessel.base_rental_rate}</p>

                        <p class="card-text"><b>Fuel surcharge: </b>$${vessel.fuel_surcharge}</p>
                        <p class="card-text"><b>Max travel distance: </b>${vessel.max_travel_distance_nautical_miles} nautical miles</p>
                        <p class="card-text"><b>Cost per mile: </b>$${vessel.cost_per_nautical_mile}</p>
                        <p class="card-text"><b>Suitable for rain?: </b>${vessel.suitable_for_rain}</p>
                        <a href="#" class="btn btn-primary">Book Trip</a>
                    </div>
                </div>
            </div>
        `;
            catalogContent.find("#mainRow").append(boatCard);
        }
    };

    const displayVesselsAsRow = () => {
        catalogContent.html("");
        const row = `<div id="mainRow" class="row row-cols-1 g-2 g-lg-3"></div>`;
        catalogContent.append(row);
        for (vessel of vessels) {
            // replace boatimg with custom imgs in json eventually
            const boatCard = `
            <div class="col">
                <div class="card">
                    <div class="row g-0">
                        <div class="col-md-4">
                            <img src="images/boat.jpeg" class="img-fluid rounded-start" alt="...">
                        </div>
                        <div class="col-md-8">
                            <div class="card-body">
                                <h5 class="card-title">${vessel.name}</h5>
                                <p class="card-text"><b>Type: </b>${vessel.type}</p>
                                <p class="card-text"><b>Length: </b>${vessel.length_meters} meters</p>
                                <p class="card-text"><b>Speed: </b>${vessel.speed_knots} knots</p>
                                <p class="card-text"><b>Crew needed: </b>${vessel.crew_required} members</p>
                                <p class="card-text"><b>Crew per member: </b>$${vessel.crew_cost_per_member}</p>
                                <p class="card-text"><b>Base rate: </b>$${vessel.base_rental_rate}</p>

                                <p class="card-text"><b>Fuel surcharge: </b>$${vessel.fuel_surcharge}</p>
                                <p class="card-text"><b>Max travel distance: </b>${vessel.max_travel_distance_nautical_miles} nautical miles</p>
                                <p class="card-text"><b>Cost per mile: </b>$${vessel.cost_per_nautical_mile}</p>
                                <p class="card-text"><b>Suitable for rain?: </b>${vessel.suitable_for_rain}</p>
                                <a href="#" class="btn btn-primary">Book Trip</a>
                            </div>
                        </div>
                    </div>    
                </div>
            </div>
        `;
            catalogContent.find("#mainRow").append(boatCard);
        }
    };

    const displayVesselsUsingMasonry = () => {
        catalogContent.html("");
        const row = `<div id="mainRow" class="row" data-masonry='{"percentPosition": true }'></div>`;
        catalogContent.append(row);
        for (vessel of vessels) {
            // replace boatimg with custom imgs in json eventually
            const boatCard = `
            <div class="col-sm-6 col-lg-4 mb-4">
                <div class="card">
                    <img src="images/boat.jpeg" class="card-img-top" alt="...">
                    <div class="card-body">
                        <h5 class="card-title">${vessel.name}</h5>
                        <p class="card-text"><b>Type: </b>${vessel.type}</p>
                        <p class="card-text"><b>Length: </b>${vessel.length_meters} meters</p>
                        <p class="card-text"><b>Speed: </b>${vessel.speed_knots} knots</p>
                        <p class="card-text"><b>Crew needed: </b>${vessel.crew_required} members</p>
                        <p class="card-text"><b>Crew per member: </b>$${vessel.crew_cost_per_member}</p>
                        <p class="card-text"><b>Base rate: </b>$${vessel.base_rental_rate}</p>

                        <p class="card-text"><b>Fuel surcharge: </b>$${vessel.fuel_surcharge}</p>
                        <p class="card-text"><b>Max travel distance: </b>${vessel.max_travel_distance_nautical_miles} nautical miles</p>
                        <p class="card-text"><b>Cost per mile: </b>$${vessel.cost_per_nautical_mile}</p>
                        <p class="card-text"><b>Suitable for rain?: </b>${vessel.suitable_for_rain}</p>
                        <a href="#" class="btn btn-primary">Book Trip</a>
                    </div>
                </div>
            </div>
        `;
            catalogContent.find("#mainRow").append(boatCard);
        }
    };

    // default call
    displayVesselsAsGrid();

    $("#gridBtn").on("click", displayVesselsAsGrid);
    $("#rowBtn").on("click", displayVesselsAsRow);
    $("#masonryBtn").on("click", displayVesselsUsingMasonry);
}

// i'm so sorry. i felt a deep need to do this.
// i'm addicted to IIFEs
// loadMap returns the object with the json data for the boats
(async () => {
    loadBoatCatalog(await loadMap());
})();
